* Procesadores de lenguaje
** Primer dia
- Horario de tutorias -> mirar el calendario de google
lunes 11.30 - 1.00
martes 10.30 - 12.00
miercoles 11.30 - ??.??  -- mandar email
jueves 9.30 - 11.00
*** Analisis léxico
Fichero c.
if (a==5) b=4 -> analisis lexico
separa en tokens
IF (ID 'a') EQ (Num 5) (ID 'b') ASSIGN (Num 4) -- TOKENS
*** Analisis sintáctico
Arbol de analisis sintactico
IF (EQ (ID 'a') (Num '5')) (ASSIGN (ID 'b') (Num 4)) -- El arbol
- Metodos ascendentes y decendentes
*** Analisis semántico
El arbol es la entrada del analisis semantico -> significado y sentido
Se recorre el arbol con informacion adicional(se genera un arbol decorado), los tipos de datos
ejemplo ID 'a' -> es de tipo String
EQ (ID 'a') (Num 4) --> error semántico.
-- Se pueden realizar optimizaciones aqui -> son independientes de la máquina
Ejemplo
a = 2*3
-> Constant folding
a = 6

*** Generación de código(Interpretación)
Un interprete casi ejecuta el arbol o una version intermedia de él
-> De un arbol se pasa a una estructura lineal -> una cadena
Para cada tipo de nodo hay un esquema de traducción.
- Traduzco condición
jumpifzero label
- Traduzco sentencia
label 
** Segundo dia
*** Gh-Pages
Todo lo que se ponga se puede ver como pagians estáticas
- Crear una pagiana web de usuario
** Tercer dia
Npm y el package.json
*** Practica
debe soportar numeros floatantes 1e5 ....
Permitir whitespaces entre el numero y la letra ...
Usar Emmet, caen preguntas
vemos  Document Object Model

id - Permite un acceso rapido al objeto(deberia ser unico)

class - Otro identificador compartido

autofocus - Pone el cursor en el punto establecido nadda mas abrir la page

- Mala practica poner codigo javascript en un fichero html

#+BEGIN_SRC javascript
"use strict" // Lo hace menos permiso, y da mas mensajes de error si ve cosas sospechosas
#+END_SRC


#+BEGIN_SRC javascript
a = /^[a-z]/
///
/[^a-z]/  // no debe empezar con una letra niega lso elementos a elegir
/^[a-z0-9]+$/ // $ es un anclar caza la expresion con el final "\n"
/\d/ // digit
/\s/ // space las cosas que son blancos
/\w/ // [a-zA-Z0-9_]
/(?....)/ // Parentesis "raros", son parentesis de agrupamiento como los "normales", esta solo sirve para agrupar no tiene memoria
/./ // calza con cualquier caracter salvo con el \n
/exp/i // i insentive case 
// Los parentesis tienen propiedades magicas

#+END_SRC

Los elementos del DOM tiene un atributo que permite incrustar html "innerHTML"
#+BEGIN_SRC javascript
converted.innerHTML = result;
#+END_SRC
*** CSS
Se suelen aplicar dos hojas de estilo.
Navegadores aplican de diferente forma el estilo.
CSS reset -> Es usar el estilo diseñado por el programador y no el del navegador.

Pseudoclases dinamicas a:hover
#+BEGIN_SRC c

#+END_SRC


- Se aplica la regla mas especifica


*** Practica 2
Para configurar diferentes sesiones de ssh ir al directorio `~/.ssh/config`
Se onfigura hostname ver sintaxis

y el repo de github cambiar el remoto para usar la correspondiente ssh

alu-github.com es el nombre que se puso en la config de ssh
#+BEGIN_SRC bash
git remote add origin git@alu-github.com:......
#+END_SRC

Tambien se debe cambiar la configuracion de git para hacer los commits como un determinado usuario
#+BEGIN_SRC bash
git config user.name # Tener en cuenta el global, solo se quiere cambiar el local.
git config user.email ....
#+END_SRC


Linter -> avisa de malas practicas o errores, usar un lint para las practicas!!
Hacer a pelo no usar bootstrap.

#+BEGIN_SRC bash
git checkout -b html5pattern oring/html5pattern  # hay que obtener la rama y "pillarla bien" para usarla en local
#+END_SRC


Mirar el semver.org para el versionado

La ultima parte es poner la expresion regular en pattern del input, se deja en los lados

** Javascript y amigos
*** package.json
Un fichero de configuracion para programas/aplicacion node, en el cual se pueden especificar dependencias scripts etc...

Cuando se definen los scripts las palabras con las que se definen forman parten del npm ejemplo
#+BEGIN_SRC javascript
npm test // siendo test el nombre del script
#+END_SRC


*** NOTA: GIT CHECKOUT
Permite traer ficheros de distintas ramas a la actual y de commits anteriores al actual.

#+BEGIN_SRC bash
  git checkout origin file

  git checkout commit file
#+END_SRC

*** GIT RESET 
Mueve el HEAD a una determinada posicion, tambien se puede usar para descartar todos los cambios actuales hasta los añadidos en con add

Para archivos especificos usar `git checkout -- file`

*** XRegexExp
Expresiones regulares mas legibles

#+BEGIN_SRC javascript
// Using named capture and flag x (free-spacing and line comments)
date = XRegExp('(?<year>  [0-9]{4} ) -?  # year  \n' +
               '(?<month> [0-9]{2} ) -?  # month \n' +
               '(?<day>   [0-9]{2} )     # day     ', 'x');
#+END_SRC

Permiten poner espacios, comentarios, tambien se pueden poner nombres a los parentesis,
O acceder a los elementos de la expresion regular con
#+BEGIN_SRC javascript
match = XRegexExp.exec("12-12-2015", date);

match.year // → 2015
#+END_SRC
*** Mocha
Permite varios frameworks para las excepciones en este caso usamos chai.

#+BEGIN_SRC bash
npm install --save mocha
#+END_SRC

Mocha soporta varios estilos de pruebas más parecidos a rspec, unit test  o a bdd entre otros.

#+BEGIN_SRC javascript
// estilo bdd
var expect = chai.expect;

describe("Cow", function() {
  describe("constructor", function() {
    it("should have a default name", function() {
      var cow = new Cow();
      expect(cow.name).to.equal("Anon cow");
    });

    it("should set cow's name if provided", function() {
      var cow = new Cow("Kate");
      expect(cow.name).to.equal("Kate");
    });
  });

  describe("#greets", function() { // un estandar que permite saber que la prueba se hace a un método
    it("should throw if no target is passed in", function() {
      expect(function() {
        (new Cow()).greets();
      }).to.throw(Error);
    });

    it("should greet passed target", function() {
      var greetings = (new Cow("Kate")).greets("Baby");
      expect(greetings).to.equal("Kate greets Baby!");
    });
  });
});
#+END_SRC


*** A taste of javascript

#+BEGIN_SRC javascript
"use strict";

function Cow(name) { // Es el constructor de clase
  this.name = name || "Anon cow"; // Short-Circuit // "" == false
}

Cow.prototype = { // Se definen los atributos, que pueden ser funciones...
  greets: function(target) {
    if (!target)
      throw new Error("missing target");
    return this.name + " greets " + target + "!";
  }
};
#+END_SRC


#+BEGIN_SRC javascript
// El codigo esta encapsulado, para evitar que establezcan las variables globales 
// Al hacer esto y parsarle this, exports se combierte en la variable global "Window"
// lo cual permite seleccionar que exportar. 
(function(exports) {
  "use strict";

  function Cow(name) {
    this.name = name || "Anon cow";
  }
  exports.Cow = Cow;

  Cow.prototype = {
    greets: function(target) {
      if (!target)
        throw new Error("missing target");
      return this.name + " greets " + target + "!";
    }
  };
})(this);
#+END_SRC

Una clausura es el cierre de un entorno, puede se total o parcial, si es parcial se puede decidir
que elementos tienen acceso interno al entorno.

Con _ la variables que por convencion son privadas.

*** Gulp
Task manager

*** OOP en javacript

